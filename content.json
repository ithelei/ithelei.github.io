{"meta":{"title":"养码哥","subtitle":null,"description":null,"author":"He Lei","url":"http://www.ithelei.com","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2019-08-26T13:42:29.302Z","updated":"2019-08-26T05:57:26.706Z","comments":false,"path":"/404.html","permalink":"http://www.ithelei.com//404.html","excerpt":"","text":""},{"title":"关于","date":"2019-08-26T15:43:12.807Z","updated":"2019-08-26T15:43:12.807Z","comments":false,"path":"about/index.html","permalink":"http://www.ithelei.com/about/index.html","excerpt":"","text":""},{"title":"书单","date":"2019-08-26T13:42:29.308Z","updated":"2019-08-26T05:57:26.713Z","comments":false,"path":"books/index.html","permalink":"http://www.ithelei.com/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-08-26T13:42:29.311Z","updated":"2019-08-26T05:57:26.715Z","comments":false,"path":"categories/index.html","permalink":"http://www.ithelei.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-08-26T14:06:33.045Z","updated":"2019-08-26T05:57:26.717Z","comments":true,"path":"links/index.html","permalink":"http://www.ithelei.com/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-08-26T13:42:29.318Z","updated":"2019-08-26T05:57:26.720Z","comments":false,"path":"repository/index.html","permalink":"http://www.ithelei.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-08-26T13:42:29.321Z","updated":"2019-08-26T05:57:26.722Z","comments":false,"path":"tags/index.html","permalink":"http://www.ithelei.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Tomcat记录客户端真实IP","slug":"Tomcat记录客户端真实IP","date":"2019-08-31T11:36:45.000Z","updated":"2019-08-31T12:01:25.159Z","comments":true,"path":"2019/08/31/Tomcat记录客户端真实IP/","link":"","permalink":"http://www.ithelei.com/2019/08/31/Tomcat记录客户端真实IP/","excerpt":"","text":"需求：让后端Tomcat日志获取真实的IP，而不是Nginx服务器的IP。 Tomcat前面是Nginx做的反向代理，所以Tomcat取到的是Nginx的IP 日志名称是localhost_access_log.txt 解决方案: 修改Nginx的配置文件 在server或者location中添加 proxy_set_header X-Forwarded-For $remote_addr; 修改Tomcat配置文件 修改server.xml文件，在该文件中 把className=”org.apache.catalina.valves.AccessLogValve” directory=”logs”块中的pattern参数里的内容修改为下面内容，即： pattern=”%{X-FORWARDED-FOR}i %l %u %t %r %s %b %D %q %{User-Agent}i” resolveHosts=”false” 修改完后的完整配置： `&lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot; prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot; pattern=&quot;%{X-FORWARDED-FOR}i %l %u %t %r %s %b %D %q %{User-Agent}i&quot; resolveHosts=&quot;false&quot; /&gt;`pattern配置参数详解： pattern配置段，用于指定日志的输出格式。日志参数如下： ` ％a - 远程IP地址 ％A - 本地IP地址 ％b - 发送的字节数，不包括HTTP头，或“ - ”如果没有发送字节 ％B - 发送的字节数，不包括HTTP头 ％h - 远程主机名 ％H - 请求协议 ％l (小写的L)- 远程逻辑从identd的用户名（总是返回&apos; - &apos;） ％m - 请求方法 ％p - 本地端口 ％q - 查询字符串（在前面加上一个“？”如果它存在，否则是一个空字符串 ％r - 第一行的要求 ％s - 响应的HTTP状态代码 ％S - 用户会话ID ％t - 日期和时间，在通用日志格式 ％u - 远程用户身份验证 ％U - 请求的URL路径 ％v - 本地服务器名 ％D - 处理请求的时间（以毫秒为单位） ％T - 处理请求的时间（以秒为单位） ％I （大写的i） - 当前请求的线程名称 此外，您可以指定以下别名来设置为普遍使用的模式之一： common - %h %l %u %t &quot;%r&quot; %s %b combined - %h %l %u %t &quot;%r&quot; %s %b &quot;%{Referer}i&quot; &quot;%{User-Agent}i&quot; `另外，还可以将request请求的查询参数、session会话变量值、cookie值或HTTP请求/响应头内容的变量值等内容写入到日志文件。 它仿照了apache的语法： ％{XXX}i xxx代表传入的头(HTTP Request) ％{XXX}o xxx代表传出的响应头(Http Resonse) ％{XXX}c xxx代表特定的Cookie名 ％{XXX}r xxx代表ServletRequest属性名 ％{XXX}s xxx代表HttpSession中的属性名","categories":[{"name":"Tomcat","slug":"Tomcat","permalink":"http://www.ithelei.com/categories/Tomcat/"}],"tags":[{"name":"Tomcat","slug":"Tomcat","permalink":"http://www.ithelei.com/tags/Tomcat/"}]},{"title":"Tomcat服务启动非常缓慢","slug":"Tomcat服务启动非常缓慢","date":"2019-08-31T11:36:42.000Z","updated":"2019-08-31T12:16:45.879Z","comments":true,"path":"2019/08/31/Tomcat服务启动非常缓慢/","link":"","permalink":"http://www.ithelei.com/2019/08/31/Tomcat服务启动非常缓慢/","excerpt":"","text":"概述：本文主要介绍Tomcat服务启动非常缓慢的解决方法。 问题症状 Tomcat启动非常缓慢，查看日志如下。 问题原因 SecureRandom这个jre的工具类的问题。 解决方案：在Tomcat环境中解决。 可以通过配置JRE使用非阻塞的Entropy Source。 在catalina.sh文件中加入如下内容 -Djava.security.egd=file:/dev/./urandom 加入后重启Tomcat，查看Tomcat服务启动日志，启动耗时下降。 在JVM环境中解决 打开 $JAVA_PATH/jre/lib/security/java.security这个文件。 在文件中找到如下内容。 securerandom.source=file:/dev/urandom 将内容替换成如下内容 securerandom.source=file:/dev/./urandom","categories":[{"name":"Tomcat","slug":"Tomcat","permalink":"http://www.ithelei.com/categories/Tomcat/"}],"tags":[{"name":"Tomcat","slug":"Tomcat","permalink":"http://www.ithelei.com/tags/Tomcat/"}]},{"title":"Linux性能优化实战","slug":"Linux性能优化实战","date":"2019-08-31T11:33:45.000Z","updated":"2019-08-31T13:35:58.695Z","comments":true,"path":"2019/08/31/Linux性能优化实战/","link":"","permalink":"http://www.ithelei.com/2019/08/31/Linux性能优化实战/","excerpt":"","text":"如图：","categories":[{"name":"Linux","slug":"Linux","permalink":"http://www.ithelei.com/categories/Linux/"},{"name":"性能","slug":"Linux/性能","permalink":"http://www.ithelei.com/categories/Linux/性能/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.ithelei.com/tags/Linux/"},{"name":"性能","slug":"性能","permalink":"http://www.ithelei.com/tags/性能/"}]},{"title":"MySQL优化(1)","slug":"MySQL优化(1)","date":"2019-08-28T14:39:45.000Z","updated":"2019-08-28T13:21:45.209Z","comments":true,"path":"2019/08/28/MySQL优化(1)/","link":"","permalink":"http://www.ithelei.com/2019/08/28/MySQL优化(1)/","excerpt":"","text":"MySQL查询优化应注意的问题 对查询进行优化，应尽量避免全表扫描，首先应考虑在where及order by 涉及的列上建立索引。 应尽量避免在where子句中使用！=或 &lt;&gt; 操作符，否则引擎将放弃索引而进行全表扫描。 应尽量避免在where字句中对字段进行NULL值判断，否则将导致引擎放弃使用索引而进行全表扫描，如select id from t where num is null 可以在num上设置默认值为0，确保表中num列没有null值，如select id from t where num = 0。 应尽量避免在where子句中使用or来连接条件，否则将导致引擎放弃使用索引而进行全表扫描。如下面的语句：select id from t where num =10 or num =20,可以改成下面的语句：select id from t where num =10 union all select id from t where num =20 下面的查询也将导致全表扫描： select id from t where name like &#39;%abc%&#39; in 和 not in也要慎用，否则会导致全表扫描。如下面的语句： select id from t where num in (1,2,3) 对于连续的数值，能用between 就不要用 in 了。 select id from t where num between 1 and 3 如果在where子句中使用参数，也会导致全表扫描。因为sql只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择选择推迟到运行时；他必须在编译时进行选择。然而。如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择输入项。如下面的语句将进行全表扫描。 select id from t where num=@num 可以改为强制查询使用索引，如下语句： select id from t with (index(索引名)) where num =@num 应尽量避免在where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描，如下面的语句： select id from t where num/2=100应改为 select id from t where num=100*2 应尽量避免在where子句中 对字段进行函数操作，这将导致殷勤放弃使用索引而进行全表扫描，如下面的语句： select id from t where SUBSTRING(name,1,3)=&#39;abc&#39; –name以abc开头的id select id from t where DATEDIFF(day,createdate,&#39;2019-08-28&#39;)=0 –2019-08-28生成的id 。 应改为如下面的语句： `select id from ｔ where nane like &apos;abc%&apos;` `select id from t where createdate &gt; = &apos;2019-08-28&apos; and createdate &lt; &apos;2019-08-29&apos;` 不要在where 子句中的 “=” 左边进行函数、算数运算或其他表达式运算。否则系统将可能无法正确使用索引。 在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。 很多时候用exists代替in是一个好的选择。 select num from a where num in （select num from b） 用下面的语句替换。 `select num from a where exists （select 1 from b where num=a.num）`","categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://www.ithelei.com/categories/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://www.ithelei.com/tags/MySQL/"}]},{"title":"MySQL优化(2)","slug":"MySQL优化(2)","date":"2019-08-28T13:36:45.000Z","updated":"2019-08-28T14:03:47.468Z","comments":true,"path":"2019/08/28/MySQL优化(2)/","link":"","permalink":"http://www.ithelei.com/2019/08/28/MySQL优化(2)/","excerpt":"","text":"继MySQL优化(1) 并不是所有索引对查询都有效，sql语句是根军表中数据来进行优化的，当索引列有大量数据重复时，sql查询可能不会去利用索引，如某表中有字段sex,male,female几乎各一半，那么及时在sex上建了索引也对查询效率起不了作用。 索引并不是越多越好，索引固然可以提高相应的select的效率，但同时也降低了insert和update的效率，因为insert和update时有可能会重建索引，所以怎样建索引需要慎重考虑，是具体情况而定。一个表的索引不要超过5个。若太多则时，考虑那些不常使用列上的索引是否有必要。 应尽可能地避免更新 lustered素引数据列，因为 clustered索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要烦繁更新 clustered索引数据列，那么需要考虑是否将该索引建为 clustered索引。 尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每个字符，而对于数字型而言只需要比较一次就够了。 尽可能地使用 VARCHAR/NVARCHAR代替 CHAR/NCHAR，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。 任何地方都不要使用 SELECT＊ FROM t，用具体的字段列表代替“＊”，不要返回用不到的任何字段。 尽量使用表变量来代替临时表。如果表变量包含大量数据，应注意索引非常有限(只有主键索引)。 避免频繁创建和删除临时表，以减少系统表资源的消耗 临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用,大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。 在新建临时表时，如果一次性插入数据量很大，那么可以使用 SELECT into代替 CREATEtable，避免造成大量log，以提高速度:如果数据量不大，为了缓和系统表的资源，应先CREATE table，然后 INSERT 如果使用到了临时表，在存储过程的最后务必将所有的临时表显式刷除，先 truncate tabl然后 DROP table，这样可以避免系统表的较长时间锁定。 尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应考虑改写 使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效 与临时表一样，游标并不是不可使用。对小型数据集使用FAST_ FORWARD游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的历程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好 在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON，在结束时设置SETNOCOUNT OFF。无须在执行存储过程和触发器的每个语句后向客户端发送 DONE INPROC消息。 尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理 尽量避免大事务操作，提高系统并发能力","categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://www.ithelei.com/categories/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://www.ithelei.com/tags/MySQL/"}]},{"title":"MySQL规范","slug":"MySQL规范","date":"2019-08-27T13:45:00.000Z","updated":"2019-08-27T14:16:51.451Z","comments":true,"path":"2019/08/27/MySQL规范/","link":"","permalink":"http://www.ithelei.com/2019/08/27/MySQL规范/","excerpt":"","text":"一、基础规范 表存储引擎必须使用InnoDB 表字符集默认使用utf8，必要时候使用utf8mb4 解读： （1）通用，无乱码风险，汉字3字节，英文1字节。 （2）utf8mb4是utf8的超集，有存储4字节例如表情符号时，使用它。 禁止使用存储过程，视图，触发器，Event。 解读： （1）对数据库性能影响较大，互联网业务，能让站点层和服务层干的事情，不要交到数据库层。 （2）调试，排错，迁移都比较困难，扩展性较差。 禁止在数据库中存储大文件，例如照片，可以将大文件存储在对象存储系统，数据库中存储路径。 禁止在线上环境做数据库压力测试。 测试，开发，线上数据库环境必须隔离。 二、命名规范 库名，表名，列名必须用小写，采用下划线分隔。 解读：abc，Abc，ABC都是不允许的。 库名，表名，列名必须见名知义，长度不要超过32字符。 解读：tmp，wujun谁TM知道这些库是干嘛的。 库备份必须以bak为前缀，以日期为后缀。 从库必须以-s为后缀。 备库必须以-ss为后缀。 三、表设计规范 单实例表个数必须控制在2000个以内。 单表分表个数必须控制在1024个以内。 必须有主键，推荐使用UNSIGNED整数为主键。 潜在坑：删除无主键的表，如果是row模式的主从架构，从库会挂住 禁止使用外键，如果要保证完整性，应由应用程式实现。 解读：外键使得表之间相互耦合，影响update/delete等SQL性能，有可能造成死锁，高并发情况下容易成为数据库瓶颈 建议将大字段，访问频度低的字段拆分到单独的表中存储，分离冷热数据。 四、列设计规范 根据业务区分使用tinyint/int/bigint，分别会占用1/4/8字节。 根据业务区分使用char/varchar。 解读： （1）字段长度固定，或者长度近似的业务场景，适合使用char，能够减少碎片，查询性能高 （2）字段长度相差较大，或者更新较少的业务场景，适合使用varchar，能够减少空间。 根据业务区分使用datetime/timestamp。 解读：前者占用5个字节，后者占用4个字节，存储年使用YEAR，存储日期使用DATE，存储时间使用datetime。 必须把字段定义为NOT NULL并设默认值。 解读： （1）NULL的列使用索引，索引统计，值都更加复杂，MySQL更难优化 （2）NULL需要更多的存储空间 （3）NULL只能采用IS NULL或者IS NOT NULL，而在=/!=/in/not in时有大坑 使用INT UNSIGNED存储IPv4，不要用char(15)。 使用varchar(20)存储手机号，不要使用整数。 解读： （1）牵扯到国家代号，可能出现+/-/()等字符，例如+86 （2）手机号不会用来做数学运算 （3）varchar可以模糊查询，例如like ‘138%’ 使用TINYINT来代替ENUM。 解读：ENUM增加新值要进行DDL操作。 五、索引规范 唯一索引使用uniq_[字段名]来命名。 非唯一索引使用idx_[字段名]来命名。 单张表索引数量建议控制在5个以内。 解读： （1）互联网高并发业务，太多索引会影响写性能。 （2）生成执行计划时，如果索引太多，会降低性能，并可能导致MySQL选择不到最优索引。 （3）异常复杂的查询需求，可以选择ES等更为适合的方式存储。 组合索引字段数不建议超过5个。 解读：如果5个字段还不能极大缩小row范围，八成是设计有问题 不建议在频繁更新的字段上建立索引。 非必要不要进行JOIN查询，如果要进行JOIN查询，被JOIN的字段必须类型相同，并建立索引。 解读：因为JOIN字段类型不一致，而导致全表扫描。 理解组合索引最左前缀原则，避免重复建设索引，如果建立了(a,b,c)，相当于建立了(a), (a,b), (a,b,c)。 六、SQL规范 禁止使用select *，只获取必要字段。 解读： （1）select *会增加cpu/io/内存/带宽的消耗。 （2）指定字段能有效利用索引覆盖。 （3）指定字段查询，在表结构变更时，能保证对应用程序无影响。 insert必须指定字段，禁止使用insert into T values()。 解读：指定字段插入，在表结构变更时，能保证对应用程序无影响。 隐式类型转换会使索引失效，导致全表扫描。 禁止在where条件列使用函数或者表达式。 解读：导致不能命中索引，全表扫描 禁止负向查询以及%开头的模糊查询。 解读：导致不能命中索引，全表扫描。 禁止大表JOIN和子查询。 同一个字段上的OR必须改写问IN，IN的值必须少于50个。 应用程序必须捕获SQL异常。 解读：方便定位线上问题","categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://www.ithelei.com/categories/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://www.ithelei.com/tags/MySQL/"}]},{"title":"阿里云标准-Apache Tomcat 安全基线检查","slug":"阿里云标准-Apache Tomcat 安全基线检查","date":"2019-08-27T13:27:24.000Z","updated":"2019-08-27T13:36:34.131Z","comments":true,"path":"2019/08/27/阿里云标准-Apache Tomcat 安全基线检查/","link":"","permalink":"http://www.ithelei.com/2019/08/27/阿里云标准-Apache Tomcat 安全基线检查/","excerpt":"","text":"Tomcat进程运行权限检测 | 访问控制描述 在运行Internet服务时，最好尽可能避免使用root用户运行，降低攻击者拿到服务器控制权限的机会。 加固建议 创建低权限的账号运行Tomcat 操作时建议做好记录或备份 Tomcat目录权限检测 | 访问控制描述 在运行Tomcat服务时，避免使用root用户运行，tomcat目录(catalina.home、 catalina.base目录)所有者应改为非root的运行用户 加固建议 使用chown -R &lt;Tomcat启动用户所属组&gt;:&lt;Tomcat启动用户&gt; &lt;Tomcat目录&gt;修改tomcat目录文件所有者，如chown -R tomcat:tomcat /usr/local/tomcat 操作时建议做好记录或备份 限制服务器平台信息泄漏 | 服务配置描述 限制服务器平台信息泄漏会使攻击者更难确定哪些漏洞会影响服务器平台。 加固建议 1、进入Tomcat安装主目录的lib目录下，比如 cd /usr/local/tomcat7/lib 2、执行：jar xf catalina.jar org/apache/catalina/util/ServerInfo.properties，修改文件ServerInfo.properties中的server.info和server.number的值，如分别改为：Apache/11.0.92、11.0.92.0 3、执行：jar uf catalina.jar org/apache/catalina/util/ServerInfo.properties 4、重启Tomcat服务 操作时建议做好记录或备份 禁止自动部署 | 服务配置描述 配置自动部署，容易被部署恶意或未经测试的应用程序，应将其禁用 加固建议 修改Tomcat 跟目录下的配置文件conf/server.xml，将host节点的autoDeploy属性设置为“false”，如果host的deployOnStartup属性(如没有deployOnStartup配置可以忽略)为“true”，则也将其更改为“false” 操作时建议做好记录或备份 禁止显示异常调试信息 | 服务配置描述 当请求处理期间发生运行时错误时，ApacheTomcat将向请求者显示调试信息。建议不要向请求者提供此类调试信息。 加固建议 在Tomcat根目录下的conf/web.xml文件里面的web-app添加子节点：java.lang.Throwable/error.jsp，在webapps目录下创建error.jsp，定义自定义错误信息 操作时建议做好记录或备份 开启日志记录 | 安全审计描述 Tomcat需要保存输出日志，以便于排除错误和发生安全事件时，进行分析和定位 加固建议 1、修改Tomcat根目录下的conf/server.xml文件。 2、取消Host节点下Valve节点的注释(如没有则添加)。 3、重新启动Tomcat 操作时建议做好记录或备份 禁止Tomcat显示目录文件列表 | 服务配置描述 Tomcat允许显示目录文件列表会引发目录遍历漏洞 加固建议 修改Tomcat 跟目录下的配置文件conf/web.xml，将listings的值设置为false。 listings false 操作时建议做好记录或备份 删除项目无关文件和目录 | 访问控制描述 Tomcat安装提供了示例应用程序、文档和其他可能不用于生产程序及目录，存在极大安全风险，建议移除 加固建议 请删除Tomcat示例程序和目录、管理控制台等，即从Tomcat根目录的webapps目录，移出或删除docs、examples、host-manager、manager目录。 操作时建议做好记录或备份 避免为tomcat配置manager-gui弱口令 | 访问控制描述 tomcat-manger是Tomcat提供的web应用热部署功能，该功能具有较高权限，会直接控制Tomcat应用，应尽量避免使用此功能。如有特殊需求，请务必确保为该功能配置了强口令 加固建议 编辑Tomcat根目录下的配置文件conf/tomcat-user.xml，修改user节点的password属性值为复杂密码, 密码应符合复杂性要求： 1、长度8位以上 2、包含以下四类字符中的三类字符:英文大写字母(A 到 Z)英文小写字母(a 到 z)10 个基本数字(0 到 9)非字母字符(例如 !、$、#、%、@、^、&amp;) 3、避免使用已公开的弱密码，如：abcd.1234 、admin@123等操作时建议做好记录或备份","categories":[{"name":"安全","slug":"安全","permalink":"http://www.ithelei.com/categories/安全/"}],"tags":[{"name":"基线","slug":"基线","permalink":"http://www.ithelei.com/tags/基线/"},{"name":"Apache Tomcat","slug":"Apache-Tomcat","permalink":"http://www.ithelei.com/tags/Apache-Tomcat/"}]},{"title":"CentOS Linux 7安全基线检查","slug":"CentOS Linux 7安全基线检查","date":"2019-08-26T14:25:24.000Z","updated":"2019-08-27T13:20:42.155Z","comments":true,"path":"2019/08/26/CentOS Linux 7安全基线检查/","link":"","permalink":"http://www.ithelei.com/2019/08/26/CentOS Linux 7安全基线检查/","excerpt":"","text":"设置用户权限配置文件的权限 | 文件权限描述 设置用户权限配置文件的权限 加固建议 执行以下5条命令 chown root:root /etc/passwd /etc/shadow /etc/group /etc/gshadow chmod 0644 /etc/group chmod 0644 /etc/passwd chmod 0400 /etc/shadow chmod 0400 /etc/gshadow 操作时建议做好记录或备份 确保SSH LogLevel设置为INFO | 服务配置描述 确保SSH LogLevel设置为INFO,记录登录和注销活动 加固建议 编辑 /etc/ssh/sshd_config 文件以按如下方式设置参数(取消注释): LogLevel INFO 操作时建议做好记录或备份 设置SSH空闲超时退出时间 | 服务配置描述 设置SSH空闲超时退出时间,可降低未授权用户访问其他用户ssh会话的风险 加固建议 编辑/etc/ssh/sshd_config，将ClientAliveInterval 设置为300到900，即5-15分钟，将ClientAliveCountMax设置为0。 ClientAliveInterval 900 ClientAliveCountMax 0 操作时建议做好记录或备份 SSHD强制使用V2安全协议 | 服务配置描述 SSHD强制使用V2安全协议 加固建议 编辑 /etc/ssh/sshd_config 文件以按如下方式设置参数： Protocol 2 操作时建议做好记录或备份 确保SSH MaxAuthTries设置为3到6之间 | 服务配置描述 设置较低的Max AuthTrimes参数将降低SSH服务器被暴力攻击成功的风险。 加固建议 在/etc/ssh/sshd_config中取消MaxAuthTries注释符号#，设置最大密码尝试失败次数3-6，建议为4： MaxAuthTries 4 操作时建议做好记录或备份 设置密码修改最小间隔时间 | 身份鉴别描述 设置密码修改最小间隔时间，限制密码更改过于频繁 加固建议 在 /etc/login.defs 中将 PASS_MIN_DAYS 参数设置为7-14之间,建议为7： PASS_MIN_DAYS 7 需同时执行命令为root用户设置： chage –mindays 7 root 操作时建议做好记录或备份 设置密码失效时间 | 身份鉴别描述 设置密码失效时间，强制定期修改密码，减少密码被泄漏和猜测风险，使用非密码登陆方式(如密钥对)请忽略此项。 加固建议 使用非密码登陆方式如密钥对，请忽略此项。在 /etc/login.defs 中将 PASS_MAX_DAYS 参数设置为 60-180之间，如 PASS_MAX_DAYS 90。需同时执行命令设置root密码失效时间： chage –maxdays 90 root。 操作时建议做好记录或备份 禁止SSH空密码用户登录 | 服务配置描述 禁止SSH空密码用户登录 加固建议 在/etc/ssh/sshd_config中取消PermitEmptyPasswords no注释符号# 操作时建议做好记录或备份 确保root是唯一的UID为0的帐户 | 身份鉴别描述 除root以外其他UID为0的用户都应该删除，或者为其分配新的UID 加固建议 除root以外其他UID为0的用户(查看命令cat /etc/passwd | awk -F: ‘($3 == 0) { print $1 }’|grep -v ‘^root$’ )都应该删除，或者为其分配新的UID 操作时建议做好记录或备份","categories":[{"name":"安全","slug":"安全","permalink":"http://www.ithelei.com/categories/安全/"}],"tags":[{"name":"CentOS Linux 7","slug":"CentOS-Linux-7","permalink":"http://www.ithelei.com/tags/CentOS-Linux-7/"},{"name":"基线","slug":"基线","permalink":"http://www.ithelei.com/tags/基线/"}]}]}